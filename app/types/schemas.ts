// Generated by ts-to-zod
import { z } from "zod";
import type { Json } from "./database.types";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const categoriesRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  image_url: z.string().nullable(),
  name: z.string(),
  slug: z.string(),
});

export const categoriesInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  image_url: z.string().optional().nullable(),
  name: z.string(),
  slug: z.string(),
});

export const categoriesUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  image_url: z.string().optional().nullable(),
  name: z.string().optional(),
  slug: z.string().optional(),
});

export const categoriesRelationshipsSchema = z.tuple([]);

export const conditionRowSchema = z.object({
  created_at: z.string(),
  description: z.string(),
  id: z.string(),
  name: z.string(),
});

export const conditionInsertSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  name: z.string(),
});

export const conditionUpdateSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
});

export const conditionRelationshipsSchema = z.tuple([]);

export const locationRowSchema = z.object({
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.number(),
  name: z.string(),
});

export const locationInsertSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.number().optional(),
  name: z.string(),
});

export const locationUpdateSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.number().optional(),
  name: z.string().optional(),
});

export const locationRelationshipsSchema = z.tuple([]);

export const productImagesRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  Image_url: z.string(),
  name: z.string(),
  product_name: z.string(),
});

export const productImagesInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  Image_url: z.string(),
  name: z.string(),
  product_name: z.string(),
});

export const productImagesUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  Image_url: z.string().optional(),
  name: z.string().optional(),
  product_name: z.string().optional(),
});

export const productImagesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("product_images_product_name_fkey"),
    columns: z.tuple([z.literal("product_name")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("products"),
    referencedColumns: z.tuple([z.literal("name")]),
  }),
]);

export const productsRowSchema = z.object({
  age: z.string().nullable(),
  brand: z.string().nullable(),
  category: z.string(),
  condition: z.string(),
  created_at: z.string(),
  description: z.string(),
  features: jsonSchema.nullable(),
  id: z.string(),
  is_active: z.boolean(),
  location: z.string(),
  model: z.string().nullable(),
  name: z.string(),
  original_price: z.number(),
  rating: z.number(),
  selling_price: z.number(),
  slug: z.string(),
  warranty: z.string(),
});

export const productsInsertSchema = z.object({
  age: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  category: z.string(),
  condition: z.string(),
  created_at: z.string().optional(),
  description: z.string().optional(),
  features: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  location: z.string(),
  model: z.string().optional().nullable(),
  name: z.string(),
  original_price: z.number(),
  rating: z.number(),
  selling_price: z.number(),
  slug: z.string(),
  warranty: z.string().optional(),
});

export const productsUpdateSchema = z.object({
  age: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  category: z.string().optional(),
  condition: z.string().optional(),
  created_at: z.string().optional(),
  description: z.string().optional(),
  features: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  location: z.string().optional(),
  model: z.string().optional().nullable(),
  name: z.string().optional(),
  original_price: z.number().optional(),
  rating: z.number().optional(),
  selling_price: z.number().optional(),
  slug: z.string().optional(),
  warranty: z.string().optional(),
});

export const productsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("products_category_fkey"),
    columns: z.tuple([z.literal("category")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("Categories"),
    referencedColumns: z.tuple([z.literal("name")]),
  }),
  z.object({
    foreignKeyName: z.literal("products_condition_fkey"),
    columns: z.tuple([z.literal("condition")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("Condition"),
    referencedColumns: z.tuple([z.literal("name")]),
  }),
  z.object({
    foreignKeyName: z.literal("products_location_fkey"),
    columns: z.tuple([z.literal("location")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("location"),
    referencedColumns: z.tuple([z.literal("name")]),
  }),
]);
